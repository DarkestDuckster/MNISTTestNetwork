#ifndef __CUDA_METHODS_H__
#define __CUDA_METHODS_H__

#define CUDA_ERR_CHECK(ret) \
{ \
  const cudaError_t error = ret; \
  if (error != cudaSuccess) { \
    printf("cuda Error! %s:%d\n", __FILE__, __LINE__); \
    printf("#%d: %s\n", error, cudaGetErrorString(error)); \
    exit(EXIT_FAILURE); \
  } \
} \

typedef void (*Destructor) (void *element)

typedef struct _Cuda_Queue_Element
{
  _Cuda_Queue_Element *next;
  void *element;
  Destructor *destructor_pointer;
} CudaQueueElement;


typedef struct _Cuda_Matrix
{
  void *ptr;
  int num_dimensions, *dimension_sizes;
} CudaMatrix;

__global__ void initializeMemory(float *dst, int size, float val);
void addCudaElement(void *element, Destructor destructor_pointer);
CudaMatrix *createCudaMatrix(int num_dimensions, int *dimension_sizes);
void destroyCudaMatrix(void *matrix);
void destroyCudaPointers(void);
int returnDimensionSize(int input_size, int padding, int kernel_size, int stride);

#endif
