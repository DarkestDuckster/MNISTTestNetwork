#ifndef __CONVMETHODS_H__
#define __CONVMETHODS_H__

#define CUDNN_ERR_CHECK(ret) \
{ \
  const cudnnStatus_t error = ret; \
  if (error != CUDNN_STATUS_SUCCESS) { \
    printf("cudnn Error! %s:%d\n", __FILE__, __LINE__); \
    printf("#%d: %s\n", error, cudnnGetErrorString(error)); \
    exit(EXIT_FAILURE); \
  } \
} \

typedef struct _Workspace_Info
{
  size_t size;
  void *workspace_pointer;
} WorkspaceInfo;

typedef struct _Convolutional_Info
{
  cudnnTensorDescriptor_t in, out;
  cudnnFilterDescriptor_t filter;
  cudnnConvolutionDescriptor_t convolution;
  cudnnConvolutionFwdAlgo_t algorithm;
  WorkspaceInfo workspace;
  cudnnTensorDescriptor_t bias;
  cudnnActivationDescriptor_t activation;
} ConvInfo;

typedef struct _Pooling_Info
{
  cudnnTensorDescriptor_t in, out;
  cudnnPoolingDescriptor_t pooling;
} PoolInfo;


ConvInfo *setupNetworkInfo(
    int             in_channels,
    int             out_channels,
    int             image_width,
    int             image_height,
    int             batch_size,
    int             kernel_size,
    int             padding_size,
    int             strides
  );

PoolInfo *setupPoolInfo(
    int             channels,
    int             input_width,
    int             input_height,
    int             batch_size,
    int             pool_size,
    int             padding_size,
    int             strides
  );

void findBestAlgorithm(ConvInfo *network, cudnnHandle_t handle, int algorithms_to_search);
void destroyPool(PoolInfo *pool);
void forwardPool(PoolInfo *pool, cudnnHandle_t handle, void *in, void *out);

void destroyNetwork(ConvInfo *network);
void forwardNetwork(ConvInfo *network, cudnnHandle_t handle, void *in, void *weights, void *bias, void *output);

#endif
