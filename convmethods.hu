#ifndef __CONVMETHODS_H__
#define __CONVMETHODS_H__

#include "cudamethods.hu"

#define CUDNN_ERR_CHECK(ret) \
{ \
  const cudnnStatus_t error = ret; \
  if (error != CUDNN_STATUS_SUCCESS) { \
    printf("cudnn Error! %s:%d\n", __FILE__, __LINE__); \
    printf("#%d: %s\n", error, cudnnGetErrorString(error)); \
    exit(EXIT_FAILURE); \
  } \
} \

typedef struct _Workspace_Info
{
  size_t size;
  void *workspace_pointer;
} WorkspaceInfo;

typedef struct _Convolutional_Info
{
  cudnnTensorDescriptor_t in, out;
  cudnnFilterDescriptor_t filter;
  cudnnConvolutionDescriptor_t convolution;
  cudnnConvolutionFwdAlgo_t algorithm;
  WorkspaceInfo workspace;
  cudnnTensorDescriptor_t bias;
  cudnnActivationDescriptor_t activation;
  CudaMatrix *input_matrix, *output_matrix;
  CudaMatrix *weights, *biases;
} ConvInfo;

typedef struct _Pooling_Info
{
  cudnnTensorDescriptor_t in, out;
  cudnnPoolingDescriptor_t pooling;
  CudaMatrix *input_matrix, *output_matrix;
} PoolInfo;

typedef struct _Softmax_Info
{
  cudnnSoftmaxAlgorithm_t algorithm;
  cudnnSoftmaxMode_t mode;
  cudnnTensorDescriptor_t in, out;
} SoftmaxInfo;

ConvInfo *setupNetworkInfo(
    CudaMatrix *input,
    int             out_channels,
    int             kernel_size,
    int             padding_size,
    int             strides
  );

PoolInfo *setupPoolInfo(
    CudaMatrix *input,
    int             pool_size,
    int             padding_size,
    int             stride
  );



CudaMatrix *getFilterOutput(CudaMatrix *in, int out_channels, int filter_size, int padding_size, int strides);

void findBestAlgorithm(ConvInfo *network, cudnnHandle_t handle, int algorithms_to_search);
void destroyNetwork(ConvInfo *network);
void destroyPool(PoolInfo *pool);
cudnnStatus_t forwardNetwork(ConvInfo *network, cudnnHandle_t handle);
cudnnStatus_t forwardPool(PoolInfo *network, cudnnHandle_t handle);

#endif
